(in-package #:kslgui)

(export '(window create-window window-layer
                 window-x window-y window-width window-height
                 window-manually-rendered))
(defstruct (window (:copier nil)
                   (:constructor create-window (layer &key width height resize-to-contents-x resize-to-contents-y manually-rendered)))
  (resize-to-contents-x nil :type boolean)
  (resize-to-contents-y nil :type boolean)
  (manually-rendered nil :type boolean)
  (layer (unreachable) :type (or null layer))
  (sdet-root (sdet:make-root) :type sdet:root :read-only t)
  (widget nil :type (or null widget))
  (x 0.0d0 :type double-float)
  (y 0.0d0 :type double-float)
  (height 0.0d0 :type double-float)
  (width 0.0d0 :type double-float)
  (on-focus-recieved nil :type (or null (function (ui window) (values &optional))))
  (on-focus-lost nil :type (or null (function (ui window) (values &optional)))))

(export 'destroy-window)
(declaim (ftype (function (window) (values &optional)) destroy-window))
(defun destroy-window (window)
  (sdet:clean-root (window-sdet-root window))
  (values))

(export 'set-window-layout)
(declaim (ftype (function (window double-float double-float double-float double-float) (values &optional)) set-window-layout))
(defun set-window-layout (window x y width height)
  (setf (window-x window) x)
  (setf (window-y window) y)
  (setf (window-width window) width)
  (setf (window-height window) height)
  (values))

(export 'set-window-focus-recieved-handler)
(declaim (ftype (function (window (or null (function (ui window) (values &optional)))) (values &optional)) set-window-focus-recieved-handler))
(defun set-window-focus-recieved-handler (window on-focus-recieved)
  (setf (window-on-focus-recieved window) on-focus-recieved)
  (values))

(export 'set-window-focus-lost-handler)
(declaim (ftype (function (window (or null (function (ui window) (values &optional)))) (values &optional)) set-window-focus-lost-handler))
(defun set-window-focus-lost-handler (window on-focus-lost)
  (setf (window-on-focus-lost window) on-focus-lost)
  (values))

(export 'compose)
(defmacro compose (ui window widget-tree)
  (alexandria:once-only (ui window)
    (alexandria:with-gensyms (previous-parent previous-layer previous-root previous-index previous-yoga-index)
      (macroexpand-with-ui* ui
        `(let ((,previous-parent (ui-temp-parent ,ui))
               (,previous-layer (ui-temp-layer ,ui))
               (,previous-root (ui-temp-root ,ui))
               (,previous-index (ui-temp-index ,ui))
               (,previous-yoga-index (ui-temp-yoga-index ,ui)))
           (setf (ui-temp-parent ,ui) nil)
           (setf (ui-temp-layer ,ui) (window-layer ,window))
           (setf (ui-temp-root ,ui) nil)
           (setf (ui-temp-index ,ui) 0)
           (setf (ui-temp-yoga-index ,ui) 0)
           (sdet:clean-root (window-sdet-root ,window))
           (sdet:with-root (ui-sdet-context ,ui) (window-sdet-root ,window)
             ,widget-tree)
           (setf (window-widget ,window) (ui-temp-root ,ui))
           (setf (ui-temp-parent ,ui) ,previous-parent)
           (setf (ui-temp-layer ,ui) ,previous-layer)
           (setf (ui-temp-root ,ui) ,previous-root)
           (setf (ui-temp-index ,ui) ,previous-index)
           (setf (ui-temp-yoga-index ,ui) ,previous-yoga-index)
           (values))))))

(declaim (ftype (function (ui widget) (values (or null layer) &optional)) widget-layer))
(defun widget-layer (ui widget)
  (declare (type widget widget))
  (loop #:while (widget-parent widget)
        #:do (setf widget (widget-parent widget)))
  (maphash (lambda (layer windows)
             (loop #:for window #:across windows
                   #:do (if (eq widget (window-widget window))
                            (return-from widget-layer layer))))
           (ui-windows ui))
  nil)
