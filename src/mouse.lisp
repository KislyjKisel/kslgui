(in-package #:kslgui)

(declaim (ftype (function (ui widget single-float single-float) (values boolean &optional)) hit-widget-p))
(defun hit-widget-p (ui widget x y)
  (if (widget-hitp widget)
      (funcall (widget-hitp widget) ui widget x y)
      (and (>= x (widget-layer-x widget))
           (>= y (widget-layer-y widget))
           (< x (+ (widget-layer-x widget) (widget-width widget)))
           (< y (+ (widget-layer-y widget) (widget-height widget))))))

(export 'own-mouse)
(declaim (ftype (function (ui widget) (values &optional)) own-mouse))
(defun own-mouse (ui widget)
  (when (and (ui-mouse-owner ui) (widget-on-mouse-ownership-lost (ui-mouse-owner ui)))
        (funcall (widget-on-mouse-ownership-lost (ui-mouse-owner ui)) ui widget))
  (setf (ui-mouse-owner ui) widget)
  (values))

(export 'disown-mouse)
(declaim (ftype (function (ui widget) (values &optional)) disown-mouse))
(defun disown-mouse (ui widget)
  (when (eq (ui-mouse-owner ui) widget)
        (setf (ui-mouse-owner ui) nil))
  (values))

(declaim (ftype (function (ui widget single-float single-float (function (widget) boolean)) (values boolean &optional))
                traverse-widget-with-mouse-rec))
(defun traverse-widget-with-mouse-rec (ui widget x y f)
  (when (and (widget-rendering-isolated-p widget)
             (or (null (widget-children-mouse-events-clip widget))
                 (aabb-contains (widget-children-mouse-events-clip widget) x y)))
        (update-widget-rendering-order-cache ui widget)
        (let ((len (length (widget-rendering-order-cache widget))))
          (dotimes (i len)
            (when (traverse-widget-with-mouse-rec ui (aref (widget-rendering-order-cache widget) (- len 1 i)) x y f)
                  (return-from traverse-widget-with-mouse-rec t)))))
  (funcall f widget))

(declaim (ftype (function (ui (or null layer) single-float single-float (function (widget) boolean)) (values boolean &optional))
                traverse-ui-with-mouse))
(defun traverse-ui-with-mouse (ui layer x y f)
  (multiple-value-bind (windows present)
      (gethash layer (ui-windows ui))
    (unless present
      (return-from traverse-ui-with-mouse nil))
    (loop #:for window #:across windows
          #:do (when (traverse-widget-with-mouse-rec ui (window-widget window) x y f)
                     (return-from traverse-ui-with-mouse t))))
  nil)

(export 'update-cursor)
(declaim (ftype (function (ui) (values &optional)) update-cursor))
(defun update-cursor (ui)
  "Update currently shown cursor. Should be called every frame."
  (if (ui-mouse-owner ui)
      (let ((widget (ui-mouse-owner ui)))
        (setf (ui-cursor ui) (or (if (functionp (widget-cursor widget))
                                     (funcall (widget-cursor widget) ui widget (ui-cursor-x ui) (ui-cursor-y ui))
                                     (widget-cursor widget))
                                 :default)))
      (unless
          (traverse-ui-with-mouse ui (ui-cursor-layer ui) (ui-cursor-x ui) (ui-cursor-y ui)
                                  (lambda (widget)
                                    (when (and (widget-cursor widget)
                                               (hit-widget-p ui
                                                             widget
                                                             (ui-cursor-x ui)
                                                             (ui-cursor-y ui)))
                                          (let ((cursor
                                                 (if (functionp (widget-cursor widget))
                                                     (funcall (widget-cursor widget) ui widget (ui-cursor-x ui) (ui-cursor-y ui))
                                                     (widget-cursor widget))))
                                            (when cursor
                                                  (setf (ui-cursor ui) cursor)
                                                  t)))))
        (setf (ui-cursor ui) :default)))
  (values))

(export 'emit-mouse-move)
(declaim (ftype (function (ui (or null layer) single-float single-float &optional t) (values &optional)) emit-mouse-move))
(defun emit-mouse-move (ui layer x y &optional other)
  (setf (ui-cursor-layer ui) layer)
  (setf (ui-cursor-x ui) x)
  (setf (ui-cursor-y ui) y)
  (if (ui-mouse-owner ui)
      (let ((widget (ui-mouse-owner ui)))
        (when (widget-on-mouse-move widget)
              (funcall (widget-on-mouse-move widget) ui widget x y other))
        (if (hit-widget-p ui widget x y)
            (unless (funcall (widget-get-mouse-hover-p widget))
              (funcall (widget-set-mouse-hover-p widget) t)
              (when (widget-on-mouse-enter widget)
                    (funcall (widget-on-mouse-enter widget) ui widget x y other)))
            (when (funcall (widget-get-mouse-hover-p widget))
                  (funcall (widget-set-mouse-hover-p widget) nil)
                  (when (widget-on-mouse-leave widget)
                        (funcall (widget-on-mouse-leave widget) ui widget x y other)))))
      (traverse-ui-with-mouse ui layer x y
                              (lambda (widget)
                                (if (hit-widget-p ui widget x y)
                                    (prog1
                                        (when (widget-on-mouse-move widget)
                                              (funcall (widget-on-mouse-move widget) ui widget x y other))
                                      (unless (funcall (widget-get-mouse-hover-p widget))
                                        (funcall (widget-set-mouse-hover-p widget) t)
                                        (when (widget-on-mouse-enter widget)
                                              (funcall (widget-on-mouse-enter widget) ui widget x y other))))
                                    (prog1 nil
                                      (when (funcall (widget-get-mouse-hover-p widget))
                                            (funcall (widget-set-mouse-hover-p widget) nil)
                                            (when (widget-on-mouse-leave widget)
                                                  (funcall (widget-on-mouse-leave widget) ui widget x y other))))))))
  (values))

(export 'emit-mouse-scroll)
(declaim (ftype (function (ui single-float single-float &optional t) (values &optional)) emit-mouse-scroll))
(defun emit-mouse-scroll (ui delta-x delta-y &optional other)
  (let ((x (ui-cursor-x ui))
        (y (ui-cursor-y ui)))
    (if (ui-mouse-owner ui)
        (let ((widget (ui-mouse-owner ui)))
          (when (widget-on-mouse-scroll widget)
                (funcall (widget-on-mouse-scroll widget) ui widget x y delta-x delta-y other)))
        (traverse-ui-with-mouse ui (ui-cursor-layer ui) x y
                                (lambda (widget)
                                  (when (and (hit-widget-p ui widget x y)
                                             (widget-on-mouse-scroll widget))
                                        (funcall (widget-on-mouse-scroll widget) ui widget x y delta-x delta-y other))))))
  (values))

(defmacro define-emit-mouse-button-function (typ btn)
  (let* ((suffix (concatenate 'string (symbol-name typ) "-" (symbol-name btn)))
         (fname (intern (concatenate 'string "EMIT-MOUSE-" suffix)))
         (cb-getter-name (intern (concatenate 'string "WIDGET-ON-MOUSE-" suffix)))
         (click-cb-getter-name (intern (concatenate 'string "WIDGET-ON-MOUSE-CLICK-" (symbol-name btn))))
         (active-bit-name (intern (concatenate 'string "+ACTIVE-MOUSE-BUTTON-" (symbol-name btn) "+"))))
    `(progn
      (export ',fname)
      (declaim (ftype (function (ui (or null layer) single-float single-float &optional t) (values &optional)) ,fname))
      (defun ,fname (ui layer x y &optional other)
        ,@(when (eq typ :down)
                `((when (ui-reset-focus-on-mouse-down ui)
                        (set-keyboard-focus ui nil))
                  (setf (ui-focused-window ui) nil)
                  (multiple-value-bind (windows present)
                      (gethash layer (ui-windows ui))
                    (when present
                          (loop #:for window #:across windows
                                #:do (when (and (>= x (window-x window))
                                                (>= y (window-y window))
                                                (< x (+ (window-x window) (window-width window)))
                                                (< y (+ (window-x window) (window-height window))))
                                           (setf (ui-focused-window ui) window)
                                           (return)))))))
        (if (ui-mouse-owner ui)
            (let ((widget (ui-mouse-owner ui)))
              (when (,cb-getter-name widget)
                    (funcall (,cb-getter-name widget) ui widget x y other))
              ,(ecase typ
                 (:down `(when (hit-widget-p ui widget x y)
                               (funcall (widget-set-mouse-active-p widget)
                                 (logior ,active-bit-name (funcall (widget-get-mouse-active-p widget))))))
                 (:up `(let ((widget-active-mouse-buttons (funcall (widget-get-mouse-active-p widget))))
                         (when (< 0 (logand ,active-bit-name widget-active-mouse-buttons))
                               (funcall (widget-set-mouse-active-p widget)
                                 (logxor ,active-bit-name widget-active-mouse-buttons))
                               (when (and (hit-widget-p ui widget x y) (,click-cb-getter-name widget))
                                     (funcall (,click-cb-getter-name widget) ui widget x y other)))))))
            (let ,(when (eq typ :up) `(click-handled-p))
              (traverse-ui-with-mouse ui layer x y
                                      (lambda (widget)
                                        (let ((hit-widget-p (hit-widget-p ui widget x y)))
                                          (prog1
                                              (when hit-widget-p
                                                    (prog1
                                                        (when (,cb-getter-name widget)
                                                              (funcall (,cb-getter-name widget) ui widget x y other))
                                                      ,(when (eq typ :down)
                                                             `(funcall (widget-set-mouse-active-p widget)
                                                                (logior ,active-bit-name (funcall (widget-get-mouse-active-p widget)))))))
                                            ,(when (eq typ :up)
                                                   `(let ((widget-active-mouse-buttons (funcall (widget-get-mouse-active-p widget))))
                                                      (when (< 0 (logand ,active-bit-name widget-active-mouse-buttons))
                                                            (funcall (widget-set-mouse-active-p widget)
                                                              (logxor ,active-bit-name widget-active-mouse-buttons))
                                                            (when (and (not click-handled-p)
                                                                       hit-widget-p
                                                                       (,click-cb-getter-name widget))
                                                                  (setf click-handled-p (funcall (,click-cb-getter-name widget) ui widget x y other))))))))))))
        (values)))))

(define-emit-mouse-button-function :down :left)
(define-emit-mouse-button-function :down :middle)
(define-emit-mouse-button-function :down :right)
(define-emit-mouse-button-function :up :left)
(define-emit-mouse-button-function :up :middle)
(define-emit-mouse-button-function :up :right)
